// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: service/frontend/client/v1/client.proto

package statsclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientStatisticsService_Get_FullMethodName  = "/statistics.service.frontend.client.v1.ClientStatisticsService/Get"
	ClientStatisticsService_List_FullMethodName = "/statistics.service.frontend.client.v1.ClientStatisticsService/List"
)

// ClientStatisticsServiceClient is the client API for ClientStatisticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientStatisticsServiceClient interface {
	// ------------------------
	// Get: get a client statistics
	// ------------------------
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// ------------------------
	// List: list all statistics
	// ------------------------
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type clientStatisticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientStatisticsServiceClient(cc grpc.ClientConnInterface) ClientStatisticsServiceClient {
	return &clientStatisticsServiceClient{cc}
}

func (c *clientStatisticsServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, ClientStatisticsService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStatisticsServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, ClientStatisticsService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientStatisticsServiceServer is the server API for ClientStatisticsService service.
// All implementations must embed UnimplementedClientStatisticsServiceServer
// for forward compatibility
type ClientStatisticsServiceServer interface {
	// ------------------------
	// Get: get a client statistics
	// ------------------------
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// ------------------------
	// List: list all statistics
	// ------------------------
	List(context.Context, *ListRequest) (*ListResponse, error)
	mustEmbedUnimplementedClientStatisticsServiceServer()
}

// UnimplementedClientStatisticsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientStatisticsServiceServer struct {
}

func (UnimplementedClientStatisticsServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedClientStatisticsServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedClientStatisticsServiceServer) mustEmbedUnimplementedClientStatisticsServiceServer() {
}

// UnsafeClientStatisticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientStatisticsServiceServer will
// result in compilation errors.
type UnsafeClientStatisticsServiceServer interface {
	mustEmbedUnimplementedClientStatisticsServiceServer()
}

func RegisterClientStatisticsServiceServer(s grpc.ServiceRegistrar, srv ClientStatisticsServiceServer) {
	s.RegisterService(&ClientStatisticsService_ServiceDesc, srv)
}

func _ClientStatisticsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientStatisticsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientStatisticsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientStatisticsServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientStatisticsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientStatisticsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientStatisticsService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientStatisticsServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientStatisticsService_ServiceDesc is the grpc.ServiceDesc for ClientStatisticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientStatisticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statistics.service.frontend.client.v1.ClientStatisticsService",
	HandlerType: (*ClientStatisticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ClientStatisticsService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ClientStatisticsService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/frontend/client/v1/client.proto",
}
